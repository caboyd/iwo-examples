{"version":3,"file":"FileLoader.js","sources":["../../../../iwo/src/loader/FileLoader.ts"],"sourcesContent":["export class FileLoader {\r\n    protected static Default_Base_URL: string = window.location.href.substr(0, window.location.href.lastIndexOf(\"/\"));\r\n    protected static onProgress: (loaded_bytes: number, total_bytes: number, file_name: string) => void = () => {\r\n        //no-op\r\n    };\r\n    protected static onFileComplete: (file_name: string) => void = () => {\r\n        //no-op\r\n    };\r\n\r\n    public static async promiseAll(\r\n        files: string[],\r\n        base_url: string = this.Default_Base_URL\r\n    ): Promise<Response[] | any[]> {\r\n        const promises: Promise<Response>[] = [];\r\n        for (const file of files) {\r\n            const p = FileLoader.promise(file, base_url);\r\n            promises.push(p);\r\n        }\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    public static async promise(file_name: string, base_url: string = this.Default_Base_URL): Promise<Response | any> {\r\n        if (!base_url.endsWith(\"/\")) base_url += \"/\";\r\n        return fetch(base_url + file_name)\r\n            .then(response => {\r\n                if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\r\n\r\n                const contentLength = response.headers.get(\"content-length\");\r\n                if (!contentLength)\r\n                        console.warn(`Content-Length response header unavailable for ${response.url}`);\r\n\r\n                const total = (contentLength && parseInt(contentLength, 10)) || 0;\r\n                if (response.body && ReadableStream) return FileLoader.readAllChunks(response.body, total, file_name);\r\n                else return response;\r\n            })\r\n            .then(response => {\r\n                this.onFileComplete(file_name);\r\n                return response;\r\n            });\r\n    }\r\n\r\n    public static setOnProgress(func: (loaded_bytes: number, total_bytes: number, file_name: string) => void): void {\r\n        this.onProgress = (loaded_bytes: number, total_bytes: number, file_name: string): void => {\r\n            try {\r\n                func(loaded_bytes, total_bytes, file_name);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public static setOnFileComplete(f: (file_name: string) => void): void {\r\n        this.onFileComplete = (file_name: string): void => {\r\n            try {\r\n                f(file_name);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        };\r\n    }\r\n\r\n    private static readAllChunks(readableStream: ReadableStream, total_size: number, file_name: string): Response {\r\n        let loaded = 0;\r\n        const reader = readableStream.getReader();\r\n        const stream = new ReadableStream({\r\n            async start(controller: ReadableStreamDefaultController): Promise<void> {\r\n                //Pump the whole file\r\n                while (true) {\r\n                    const { done, value } = await reader.read();\r\n                    if (done) {\r\n                        break;\r\n                    }\r\n                    loaded += value.byteLength;\r\n                    //Notify caller of progress\r\n                    FileLoader.onProgress(loaded, total_size, file_name);\r\n                    controller.enqueue(value);\r\n                }\r\n                controller.close();\r\n                reader.releaseLock();\r\n            },\r\n        });\r\n        return new Response(stream, {});\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}