{"version":3,"file":"HDRImageLoader.js","sources":["../../../../iwo/src/loader/HDRImageLoader.ts"],"sourcesContent":["/*\r\nFile Format:\r\nhttp://paulbourke.net/dataformats/pic/\r\n\r\nSample Code:\r\nhttp://radsite.lbl.gov/radiance/refer/Notes/picture_format.html\r\nhttps://github.com/enkimute/hdrpng.js/blob/master/hdrpng.js\r\n */\r\n\r\nimport { FileLoader } from \"./FileLoader\";\r\n\r\nconst COLRFMT = \"32-bit_rle_rgbe\";\r\nconst FMT = \"FORMAT\";\r\nconst EXPOSURE = \"EXPOSURE\";\r\n\r\nconst XDECR = 1;\r\nconst YDECR = 2;\r\nconst YMAJOR = 4;\r\n\r\ninterface Resolution {\r\n    x: number;\r\n    y: number;\r\n    orientation: number;\r\n}\r\n\r\nexport interface HDRBuffer {\r\n    data: ArrayBufferView;\r\n    width: number;\r\n    height: number;\r\n    exposure: number;\r\n}\r\n\r\n//NOTE: Why is this necessary?  Why not instance of HDRBuffer?\r\n//  ...you are dumb, you can't do instanceof for interfaces\r\nexport function instanceOfHDRBuffer(object: any): object is HDRBuffer {\r\n    return \"data\" in object && \"width\" in object && \"height\" in object;\r\n}\r\n\r\nexport class HDRImageLoader extends FileLoader {\r\n    public static promise(file_name: string, base_url: string = this.Default_Base_URL): Promise<HDRBuffer> {\r\n        return new Promise<HDRBuffer>(resolve => {\r\n            super.promise(file_name, base_url).then((response: Response) => {\r\n                response.arrayBuffer().then((data: ArrayBuffer) => {\r\n                    const image_data = HDRImageLoader.fromArrayBuffer(data);\r\n\r\n                    resolve(image_data);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public static fromArrayBuffer(data: ArrayBuffer): HDRBuffer {\r\n        const buffer = new Uint8Array(data);\r\n        const header: Map<string, string | undefined> = getHeader(buffer);\r\n\r\n        if (!header.has(\"#?RADIANCE\") && !header.has(\"#?RGBE\")) throw new Error(\"Invalid HDR Image\");\r\n\r\n        const good_format = header.get(FMT) === COLRFMT;\r\n        if (!good_format) throw new Error(\"Invalid HDR Image FORMAT\");\r\n\r\n        const exposure = header.has(EXPOSURE) ? header.get(EXPOSURE) : 1;\r\n\r\n        const max_y = parseInt(header.get(\"Y\")!);\r\n        const max_x = parseInt(header.get(\"X\")!);\r\n\r\n        const image = new Uint8Array(max_x * max_y * 4);\r\n        let image_index = 0;\r\n\r\n        let buffer_index = parseInt(header.get(\"HEADER_END\")!);\r\n\r\n        for (let j = 0; j < max_y; j++) {\r\n            const rgbe = buffer.slice(buffer_index, (buffer_index += 4));\r\n            const scanline = [];\r\n\r\n            if (rgbe[0] != 2 || rgbe[1] != 2 || rgbe[2] & 0x80) throw \"HDR parse error ..\";\r\n            if ((rgbe[2] << 8) + rgbe[3] != max_x) throw \"HDR line mismatch ..\";\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                let ptr = i * max_x;\r\n                const ptr_end = (i + 1) * max_x;\r\n                let buf;\r\n                let count;\r\n                while (ptr < ptr_end) {\r\n                    buf = buffer.slice(buffer_index, (buffer_index += 2));\r\n                    if (buf[0] > 128) {\r\n                        count = buf[0] - 128;\r\n                        while (count-- > 0) scanline[ptr++] = buf[1];\r\n                    } else {\r\n                        count = buf[0] - 1;\r\n                        scanline[ptr++] = buf[1];\r\n                        while (count-- > 0) scanline[ptr++] = buffer[buffer_index++];\r\n                    }\r\n                }\r\n            }\r\n            for (let i = 0; i < max_x; i++) {\r\n                image[image_index++] = scanline[i];\r\n                image[image_index++] = scanline[i + max_x];\r\n                image[image_index++] = scanline[i + 2 * max_x];\r\n                image[image_index++] = scanline[i + 3 * max_x];\r\n            }\r\n        }\r\n        const float_buffer = rgbeToFloat(image);\r\n\r\n        return { data: float_buffer, height: max_y, width: max_x, exposure: exposure } as HDRBuffer;\r\n    }\r\n\r\n    // static promiseAll(\r\n    //     files: string[],\r\n    //     base_url: string = window.location.href.substr(0, window.location.href.lastIndexOf(\"/\"))\r\n    // ): Promise<HTMLImageElement[]> {\r\n    //     let imgs = Array.from({ length: files.length }, u => new Image());\r\n    //     let promises: Promise<HTMLImageElement>[] = [];\r\n    //\r\n    //     return super.promiseAll(files, base_url).then((data: Blob[]) => {\r\n    //         for (let i = 0; i < data.length; i++) {\r\n    //             let img = imgs[i];\r\n    //             let promise = new Promise<HTMLImageElement>(function(resolve) {\r\n    //                 img.src = URL.createObjectURL(data[i]);\r\n    //                 img.onload = () => resolve(img);\r\n    //             });\r\n    //             promises.push(promise);\r\n    //         }\r\n    //         return Promise.all(promises).then(images => {\r\n    //             return images;\r\n    //         });\r\n    //     });\r\n    // }\r\n    //\r\n    // static load(file_name: string, base_url: string = \"\"): HTMLImageElement {\r\n    //     let img = new Image();\r\n    //     super.promise(file_name, base_url).then(data => {\r\n    //         img.src = URL.createObjectURL(data);\r\n    //     });\r\n    //     // super.onAllComplete(1);\r\n    //     return img;\r\n    // }\r\n}\r\n\r\nfunction rgbeToFloat(buffer: Uint8Array): ArrayBufferView {\r\n    const l = buffer.byteLength >> 2;\r\n    const result = new Float32Array(l * 3);\r\n    for (let i = 0; i < l; i++) {\r\n        const s = Math.pow(2, buffer[i * 4 + 3] - (128 + 8));\r\n        result[i * 3] = buffer[i * 4] * s;\r\n        result[i * 3 + 1] = buffer[i * 4 + 1] * s;\r\n        result[i * 3 + 2] = buffer[i * 4 + 2] * s;\r\n    }\r\n    return result;\r\n}\r\n\r\n//\r\nfunction getHeader(buffer: Uint8Array): Map<string, string | undefined> {\r\n    const header = new Map();\r\n    //Grabs all lines until first empty line\r\n    let s = \"\";\r\n    let index = 0;\r\n\r\n    //Grabs text until the after the resolution line\r\n    while (!s.match(/\\n\\n[^\\n]+\\n/g)) s += String.fromCharCode(buffer[index++]);\r\n\r\n    const lines = s.split(/\\n/);\r\n\r\n    for (const line of lines) {\r\n        if (!line) continue;\r\n\r\n        // Grabs the Resolution line\r\n        // This line is of the form \"{+-}{XY} xyres {+-}{YX} yxres\\n\".\r\n        if (line.match(/[+-][XY] \\d+ [+-][YX] \\d+/)) {\r\n            const res = getResolution(line);\r\n            header.set(\"X\", res.x);\r\n            header.set(\"Y\", res.y);\r\n            continue;\r\n        }\r\n\r\n        const key_value = line.split(\"=\");\r\n        header.set(key_value[0], key_value[1] ? key_value[1] : undefined);\r\n    }\r\n\r\n    header.set(\"HEADER_END\", index);\r\n    return header;\r\n}\r\n\r\nfunction getResolution(line: string): Resolution {\r\n    const values = line.split(\" \");\r\n    const y_index = line.indexOf(\"Y\");\r\n    const x_index = line.indexOf(\"X\");\r\n\r\n    const res: Resolution = { x: 0, y: 0, orientation: 0 };\r\n\r\n    if (x_index > y_index) res.orientation |= YMAJOR;\r\n    if (line[x_index - 1] == \"-\") res.orientation |= XDECR;\r\n    if (line[y_index - 1] == \"-\") res.orientation |= YDECR;\r\n\r\n    if (x_index > y_index) {\r\n        res.y = parseInt(values[1]);\r\n        res.x = parseInt(values[3]);\r\n    } else {\r\n        res.x = parseInt(values[1]);\r\n        res.y = parseInt(values[3]);\r\n    }\r\n\r\n    if (res.x <= 0 || res.y <= 0) throw new Error(\"Invalid HDR Image Resolution in File\");\r\n\r\n    //Swap x and y if not Y major\r\n    if (res.orientation & YMAJOR) {\r\n    } else [res.x, res.y] = [res.y, res.x];\r\n\r\n    return res;\r\n}\r\n"],"names":[],"mappings":";;AAAA;;;;;;;;AAWA,MAAM,OAAO,GAAG,iBAAiB,CAAC;AAClC,MAAM,GAAG,GAAG,QAAQ,CAAC;AACrB,MAAM,QAAQ,GAAG,UAAU,CAAC;AAE5B,MAAM,KAAK,GAAG,CAAC,CAAC;AAChB,MAAM,KAAK,GAAG,CAAC,CAAC;AAChB,MAAM,MAAM,GAAG,CAAC,CAAC;AAejB;AACA;SACgB,mBAAmB,CAAC,MAAW;IAC3C,OAAO,MAAM,IAAI,MAAM,IAAI,OAAO,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,CAAC;AACvE,CAAC;MAEY,cAAe,SAAQ,UAAU;IACnC,OAAO,OAAO,CAAC,SAAiB,EAAE,WAAmB,IAAI,CAAC,gBAAgB;QAC7E,OAAO,IAAI,OAAO,CAAY,OAAO;YACjC,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,QAAkB;gBACvD,QAAQ,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,IAAiB;oBAC1C,MAAM,UAAU,GAAG,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;oBAExD,OAAO,CAAC,UAAU,CAAC,CAAC;iBACvB,CAAC,CAAC;aACN,CAAC,CAAC;SACN,CAAC,CAAC;KACN;IAEM,OAAO,eAAe,CAAC,IAAiB;QAC3C,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;QACpC,MAAM,MAAM,GAAoC,SAAS,CAAC,MAAM,CAAC,CAAC;QAElE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAE7F,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,OAAO,CAAC;QAChD,IAAI,CAAC,WAAW;YAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAE9D,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEjE,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC;QACzC,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC;QAEzC,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;QAChD,IAAI,WAAW,GAAG,CAAC,CAAC;QAEpB,IAAI,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAE,CAAC,CAAC;QAEvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,YAAY,GAAG,YAAY,IAAI,CAAC,EAAE,CAAC;YAC7D,MAAM,QAAQ,GAAG,EAAE,CAAC;YAEpB,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;gBAAE,MAAM,oBAAoB,CAAC;YAC/E,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK;gBAAE,MAAM,sBAAsB,CAAC;YAEpE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,IAAI,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;gBACpB,MAAM,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC;gBAChC,IAAI,GAAG,CAAC;gBACR,IAAI,KAAK,CAAC;gBACV,OAAO,GAAG,GAAG,OAAO,EAAE;oBAClB,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,YAAY,GAAG,YAAY,IAAI,CAAC,EAAE,CAAC;oBACtD,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE;wBACd,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;wBACrB,OAAO,KAAK,EAAE,GAAG,CAAC;4BAAE,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;qBAChD;yBAAM;wBACH,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACnB,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;wBACzB,OAAO,KAAK,EAAE,GAAG,CAAC;4BAAE,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;qBAChE;iBACJ;aACJ;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;gBAC5B,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACnC,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;gBAC3C,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;gBAC/C,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;aAClD;SACJ;QACD,MAAM,YAAY,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;QAExC,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAe,CAAC;KAC/F;CAgCJ;AAED,SAAS,WAAW,CAAC,MAAkB;IACnC,MAAM,CAAC,GAAG,MAAM,CAAC,UAAU,IAAI,CAAC,CAAC;IACjC,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACxB,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QACrD,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;KAC7C;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;AACA,SAAS,SAAS,CAAC,MAAkB;IACjC,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;;IAEzB,IAAI,CAAC,GAAG,EAAE,CAAC;IACX,IAAI,KAAK,GAAG,CAAC,CAAC;;IAGd,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC;QAAE,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAE5E,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAE5B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACtB,IAAI,CAAC,IAAI;YAAE,SAAS;;;QAIpB,IAAI,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,EAAE;YACzC,MAAM,GAAG,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,SAAS;SACZ;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;KACrE;IAED,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IAChC,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,SAAS,aAAa,CAAC,IAAY;IAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAClC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAElC,MAAM,GAAG,GAAe,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC;IAEvD,IAAI,OAAO,GAAG,OAAO;QAAE,GAAG,CAAC,WAAW,IAAI,MAAM,CAAC;IACjD,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,GAAG;QAAE,GAAG,CAAC,WAAW,IAAI,KAAK,CAAC;IACvD,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,GAAG;QAAE,GAAG,CAAC,WAAW,IAAI,KAAK,CAAC;IAEvD,IAAI,OAAO,GAAG,OAAO,EAAE;QACnB,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KAC/B;SAAM;QACH,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KAC/B;IAED,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;;IAGtF,IAAI,GAAG,CAAC,WAAW,GAAG,MAAM,EAAE,CAC7B;;QAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAEvC,OAAO,GAAG,CAAC;AACf;;;;"}