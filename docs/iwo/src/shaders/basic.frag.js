var basicFrag = "#version 300 es\nprecision highp float;\n#define GLSLIFY 1\n\nout vec4 frag_color;\n\nin vec3 local_pos;\nin vec3 view_pos;\nin vec2 tex_coord;\nin vec3 view_normal;\n\nlayout (std140) uniform ubo_per_frame{\n// base alignment   // aligned offset\n    mat4 view;            // 64               // 0\n    mat4 view_inverse;    // 64               // 64\n    mat4 projection;      // 64               // 128\n    mat4 view_projection; // 64               // 192\n\n};\n\nstruct Material {\n    vec3 albedo;\n\n    sampler2D albedo_sampler;\n    samplerCube albedo_cube_sampler;\n    bool equirectangular_texture;\n    bool active_textures[2];\n};\n\nuniform Material u_material;\n\nconst vec2 invAtan = vec2(0.1591, 0.3183);\nvec2 sampleSphericalMap(vec3 v)\n{\n    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));\n    uv *= invAtan;\n    uv += 0.5;\n    return uv;\n}\n\nvoid main()\n{\n    vec3 color;\n    vec2 uv = tex_coord;\n    if (u_material.active_textures[0]){\n        if (u_material.equirectangular_texture)\n        uv = sampleSphericalMap(normalize(local_pos));// make sure to normalize localPos\n        color =  texture(u_material.albedo_sampler, uv).rgb;\n        //color = pow(color, vec3(1.0/2.2));\n    }\n    else\n    color = u_material.albedo.rgb;\n\n    if (u_material.active_textures[1]){\n        vec3 cube_color = texture(u_material.albedo_cube_sampler, local_pos).rgb;\n       // cube_color = cube_color / (cube_color + vec3(1.0));\n       // color = pow(cube_color, vec3(1.0/2.2));\n    }\n\n//    color = max(vec3(0.0), color - 0.004);\n//    color = (color * (6.2*color + 0.5)) / (color *(6.2*color + 1.7)+0.06);\n    \n    frag_color = vec4(color, 1.0);\n}"; // eslint-disable-line

export default basicFrag;
//# sourceMappingURL=basic.frag.js.map
