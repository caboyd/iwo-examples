var gridFrag = "#version 300 es\nprecision highp float;\n#define GLSLIFY 1\n\nout vec4 frag_color;\n\nin vec3 view_pos;\nin vec3 world_pos;\n\nuniform float distance;\nuniform float frequency;\nuniform float highlight_frequency;\n\nfloat distSquared( vec2 A, vec2 B )\n{\n    vec2 C = A - B;\n    return dot( C, C );\n}\n\nvoid main() {\n    vec3 red = vec3(0.9,0.1,0.1);\n    vec3 blue = vec3(0.1,0.3,1.0);\n\n    vec2 coord = world_pos.xz * 1.0f/frequency;\n        \n    // Compute anti-aliased world-space grid lines\n    vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);\n    float line = min(grid.x, grid.y);\n\n    // Just visualize the grid lines directly\n    vec3 color = vec3(0.5);\n    float alpha = 1.0 - line;\n\n    //blue lines every x units\n    if((mod(world_pos.x + 0.5, highlight_frequency)) < 1. && grid.x < 1.) {\n        color = vec3(0.1,0.3,1.);\n        alpha = max(alpha,1.0 - grid.x);\n    }\n\n    //red lines every x units\n    if(abs(mod(world_pos.z + 0.5, highlight_frequency)) < 1. && grid.y < 1.) {\n        color = vec3(0.9,0.1,0.1);\n        alpha = max(alpha,1.0 - grid.y);\n    }\n\n    //draw anti-aliased circle at origin\n    float d = length(world_pos.xz);\n    float wd = fwidth(d);\n    float rad = 0.015 *length(view_pos);\n    float circle = smoothstep(rad + wd, rad - wd, d);\n    color = mix(color,color-vec3(0.5),circle);\n    alpha = max(alpha,circle);\n\n    //Fade out edge into circle\n    float transition = 8.0;\n    float dist = length(view_pos);\n    dist = dist - (distance - transition);\n    dist = dist / transition;\n\n    alpha = clamp(alpha - dist, 0.0, alpha);\n    frag_color = vec4(color, alpha);\n}\n"; // eslint-disable-line

export default gridFrag;
//# sourceMappingURL=grid.frag.js.map
