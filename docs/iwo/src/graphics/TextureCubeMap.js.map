{"version":3,"file":"TextureCubeMap.js","sources":["../../../../iwo/src/graphics/TextureCubeMap.ts"],"sourcesContent":["import { Renderer } from \"./Renderer\";\r\nimport { mat4 } from \"gl-matrix\";\r\nimport { Texture2D } from \"./Texture2D\";\r\nimport { HDRBuffer, instanceOfHDRBuffer } from \"loader/HDRImageLoader\";\r\nimport { BoxGeometry } from \"geometry/BoxGeometry\";\r\nimport { Mesh } from \"meshes/Mesh\";\r\nimport { ShaderSource } from \"./shader/ShaderSources\";\r\nimport { CubeCamera } from \"cameras/CubeCamera\";\r\nimport { TextureHelper } from \"./TextureHelper\";\r\nimport { AttributeType, Geometry } from \"geometry/Geometry\";\r\nimport TypedArray = NodeJS.TypedArray;\r\nimport { BufferedGeometry } from \"geometry/BufferedGeometry\";\r\n\r\nexport class TextureCubeMap {\r\n    public texture_id: WebGLTexture;\r\n\r\n    public constructor(\r\n        gl: WebGL2RenderingContext,\r\n        source: ArrayBufferView | TexImageSource | undefined = undefined,\r\n        width: number = 0,\r\n        height: number = 0,\r\n        wrap_S: number = gl.REPEAT,\r\n        wrap_T: number = gl.REPEAT,\r\n        wrap_R: number = gl.REPEAT,\r\n        mag_filter: number = gl.LINEAR,\r\n        min_filter: number = gl.LINEAR_MIPMAP_LINEAR,\r\n        internal_format: number = gl.RGBA,\r\n        format: number = gl.RGBA,\r\n        type: number = gl.UNSIGNED_BYTE,\r\n        flip: boolean = true\r\n    ) {\r\n        this.texture_id = gl.createTexture()!;\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture_id);\r\n\r\n        if (source && source instanceof HTMLImageElement) {\r\n            if (source.complete && source.src)\r\n                //prettier-ignore\r\n                TextureHelper.texParameterImage(gl, gl.TEXTURE_CUBE_MAP, source, wrap_S, wrap_T, wrap_R, mag_filter,\r\n                    min_filter, internal_format, format, type, flip);\r\n            else {\r\n                source.addEventListener(\r\n                    \"load\",\r\n                    () => {\r\n                        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture_id);\r\n                        // eslint-disable-next-line prettier/prettier\r\n                        TextureHelper.texParameterImage(\r\n                            gl,\r\n                            gl.TEXTURE_CUBE_MAP,\r\n                            source,\r\n                            wrap_S,\r\n                            wrap_T,\r\n                            wrap_R,\r\n                            // eslint-disable-next-line prettier/prettier\r\n                            mag_filter,\r\n                            min_filter,\r\n                            internal_format,\r\n                            format,\r\n                            type,\r\n                            flip\r\n                        );\r\n                    },\r\n                    { once: true }\r\n                );\r\n            }\r\n        } else if (source && TextureHelper.isArrayBufferView(source)) {\r\n            //prettier-ignore\r\n            TextureHelper.texParameterBuffer(gl, gl.TEXTURE_CUBE_MAP, source as ArrayBufferView, width, height, wrap_S,\r\n                wrap_T, wrap_R, mag_filter, min_filter, internal_format, format, type, flip);\r\n        } else if (source) {\r\n            //source is TexImageSource\r\n            //prettier-ignore\r\n            TextureHelper.texParameterImage(gl, gl.TEXTURE_CUBE_MAP, source as TexImageSource, wrap_S, wrap_T, wrap_R,\r\n                mag_filter, min_filter, internal_format, format, type, flip);\r\n        } else if (width !== 0 && height !== 0) {\r\n            // This code path exists for rendering to empty textures\r\n            //prettier-ignore\r\n            TextureHelper.texParameterBuffer(gl, gl.TEXTURE_CUBE_MAP, null, width, height, wrap_S, wrap_T, wrap_R,\r\n                mag_filter, min_filter, internal_format, format, type, flip);\r\n        } else {\r\n            //No image or buffer sets texture to pink black checkerboard\r\n            //prettier-ignore\r\n            TextureHelper.texParameterBuffer(gl, gl.TEXTURE_CUBE_MAP, TextureHelper.PINK_BLACK_CHECKERBOARD, 8, 8,\r\n                wrap_S, wrap_T, wrap_R, gl.NEAREST, gl.NEAREST, internal_format, format, type, flip);\r\n        }\r\n    }\r\n\r\n    public bind(gl: WebGL2RenderingContext, location: number): void {\r\n        gl.activeTexture(gl.TEXTURE0 + location);\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture_id);\r\n    }\r\n\r\n    public destroy(gl: WebGL2RenderingContext): void {\r\n        gl.deleteTexture(this.texture_id);\r\n    }\r\n\r\n    public static environmentFromEquirectangularHDRBuffer(\r\n        renderer: Renderer,\r\n        buffer: HDRBuffer,\r\n        resolution: number = 512\r\n    ): TextureCubeMap {\r\n        const tex = new TextureCubeMap(renderer.gl);\r\n        tex.setEquirectangularHDRBuffer(renderer, buffer, resolution);\r\n        return tex;\r\n    }\r\n\r\n    public static irradianceFromEquirectangularHDRBuffer(\r\n        renderer: Renderer,\r\n        buffer: HDRBuffer,\r\n        env_res: number = 512,\r\n        irradiance_res: number = 32\r\n    ): TextureCubeMap {\r\n        const tex = new TextureCubeMap(renderer.gl);\r\n        tex.setEquirectangularHDRBuffer(renderer, buffer, env_res);\r\n        return tex;\r\n    }\r\n\r\n    public static specularFromCubemap(\r\n        dest_cubemap: TextureCubeMap | undefined,\r\n        renderer: Renderer,\r\n        env_cubemap: TextureCubeMap,\r\n        resolution: number = 128\r\n    ): TextureCubeMap {\r\n        const gl = renderer.gl;\r\n        const ext = gl.getExtension(\"EXT_color_buffer_float\");\r\n\r\n        const max_res = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n        const res = Math.min(resolution, max_res);\r\n\r\n        const specular_cubemap = dest_cubemap || ({ texture_id: gl.createTexture() } as TextureCubeMap);\r\n\r\n        const box_geom = new BoxGeometry(2.0, 2.0, 2.0, 1, 1, 1, false);\r\n        const box_mesh = new Mesh(gl, box_geom);\r\n\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, specular_cubemap.texture_id);\r\n        //prettier-ignore\r\n        TextureHelper.texParameterBuffer(gl, gl.TEXTURE_CUBE_MAP, null, res, res,\r\n            gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.LINEAR, gl.LINEAR_MIPMAP_LINEAR, gl.RGBA16F,\r\n            gl.RGBA, gl.HALF_FLOAT, false);\r\n\r\n        const captureFBO: WebGLFramebuffer = gl.createFramebuffer()!;\r\n        const captureRBO: WebGLRenderbuffer = gl.createRenderbuffer()!;\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, captureFBO);\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, captureRBO);\r\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT24, res, res);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, captureRBO);\r\n\r\n        const cam = new CubeCamera();\r\n\r\n        // convert Environment cubemap to irradiance cubemap\r\n        const shader = Renderer.GetShader(ShaderSource.CubemapSpecularPrefilter.name)!;\r\n        shader.use();\r\n        env_cubemap.bind(gl, 0);\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, captureFBO);\r\n\r\n        const is_old_cull_face = gl.isEnabled(gl.CULL_FACE);\r\n        if (is_old_cull_face) gl.disable(gl.CULL_FACE);\r\n\r\n        const max_mip_levels = 5;\r\n        for (let mip = 0; mip < max_mip_levels; mip++) {\r\n            const mip_width = res * Math.pow(0.5, mip);\r\n            const mip_height = res * Math.pow(0.5, mip);\r\n            gl.bindRenderbuffer(gl.RENDERBUFFER, captureRBO);\r\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT24, mip_width, mip_height);\r\n            gl.viewport(0, 0, mip_width, mip_height);\r\n\r\n            const roughness = mip / (max_mip_levels - 1);\r\n            shader.setUniform(\"roughness\", roughness);\r\n\r\n            for (let i = 0; i < 6; i++) {\r\n                renderer.setPerFrameUniforms(cam.views[i], cam.projection);\r\n                renderer.setPerModelUniforms(mat4.create(), cam.views[i], cam.projection);\r\n                //prettier-ignore\r\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\r\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, specular_cubemap.texture_id, mip);\r\n                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n                renderer.draw(box_mesh.draw_mode, box_mesh.count, 0, box_mesh.index_buffer, box_mesh.vertex_buffer);\r\n            }\r\n        }\r\n\r\n        this.genBRDFLut(gl, captureFBO, captureRBO, renderer);\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        renderer.resetViewport();\r\n        if (is_old_cull_face) gl.enable(gl.CULL_FACE);\r\n\r\n        gl.deleteRenderbuffer(captureRBO);\r\n        gl.deleteFramebuffer(captureFBO);\r\n        box_mesh.destroy(gl);\r\n\r\n        return specular_cubemap;\r\n    }\r\n\r\n    public static irradianceFromCubemap(\r\n        dest_cubemap: TextureCubeMap | undefined,\r\n        renderer: Renderer,\r\n        env_cubemap: TextureCubeMap,\r\n        resolution: number = 32\r\n    ): TextureCubeMap {\r\n        const gl = renderer.gl;\r\n\r\n        const ext = gl.getExtension(\"EXT_color_buffer_float\");\r\n\r\n        const max_res = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n        const res = Math.min(resolution, max_res);\r\n\r\n        const box_geom = new BoxGeometry(2.0, 2.0, 2.0, 1, 1, 1, false);\r\n        const box_mesh = new Mesh(gl, box_geom);\r\n\r\n        const irr_cubemap = dest_cubemap || ({ texture_id: gl.createTexture()! } as TextureCubeMap);\r\n\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, irr_cubemap.texture_id);\r\n        //prettier-ignore\r\n        TextureHelper.texParameterBuffer( gl, gl.TEXTURE_CUBE_MAP, null, res, res, gl.CLAMP_TO_EDGE,\r\n            gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.LINEAR, gl.LINEAR, gl.RGBA16F, gl.RGBA, gl.HALF_FLOAT, false\r\n        );\r\n\r\n        const captureFBO: WebGLFramebuffer = gl.createFramebuffer()!;\r\n        const captureRBO: WebGLRenderbuffer = gl.createRenderbuffer()!;\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, captureFBO);\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, captureRBO);\r\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT24, res, res);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, captureRBO);\r\n\r\n        const cam = new CubeCamera();\r\n\r\n        // convert Environment cubemap to irradiance cubemap\r\n        const shader = Renderer.GetShader(ShaderSource.CubemapToIrradiance.name)!;\r\n        shader.use();\r\n        env_cubemap.bind(gl, 0);\r\n\r\n        gl.viewport(0, 0, res, res);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, captureFBO);\r\n\r\n        const is_old_cull_face = gl.isEnabled(gl.CULL_FACE);\r\n        if (is_old_cull_face) gl.disable(gl.CULL_FACE);\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            renderer.setPerFrameUniforms(cam.views[i], cam.projection);\r\n            renderer.setPerModelUniforms(mat4.create(), cam.views[i], cam.projection);\r\n            //prettier-ignore\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n                irr_cubemap.texture_id, 0);\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n            renderer.draw(box_mesh.draw_mode, box_mesh.count, 0, box_mesh.index_buffer, box_mesh.vertex_buffer);\r\n        }\r\n\r\n        this.genBRDFLut(gl, captureFBO, captureRBO, renderer);\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        renderer.resetViewport();\r\n        if (is_old_cull_face) gl.enable(gl.CULL_FACE);\r\n\r\n        gl.deleteRenderbuffer(captureRBO);\r\n        gl.deleteFramebuffer(captureFBO);\r\n        box_mesh.destroy(gl);\r\n\r\n        return irr_cubemap;\r\n    }\r\n\r\n    public setEquirectangularHDRBuffer(\r\n        renderer: Renderer,\r\n        buffer: HDRBuffer,\r\n        resolution: number = buffer.height\r\n    ): void {\r\n        this.setEquirectangular(renderer, buffer, resolution);\r\n    }\r\n\r\n    public setEquirectangularImage(renderer: Renderer, image: TexImageSource, resolution: number = image.height): void {\r\n        this.setEquirectangular(renderer, image, resolution);\r\n    }\r\n\r\n    private setEquirectangular(renderer: Renderer, image_source: TexImageSource | HDRBuffer, resolution: number): void {\r\n        const gl = renderer.gl;\r\n\r\n        const ext = gl.getExtension(\"EXT_color_buffer_float\");\r\n\r\n        const max_res = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n        const res = Math.min(resolution, max_res);\r\n\r\n        const box_geom = new BoxGeometry(2.0, 2.0, 2.0, 1, 1, 1, false);\r\n        const box_mesh = new Mesh(gl, box_geom);\r\n\r\n        let texture: Texture2D;\r\n\r\n        if (instanceOfHDRBuffer(image_source)) {\r\n            //prettier-ignore\r\n            texture = new Texture2D(gl, image_source.data, image_source.width, image_source.height, gl.CLAMP_TO_EDGE,\r\n                gl.CLAMP_TO_EDGE, gl.LINEAR, gl.LINEAR, gl.RGB32F, gl.RGB, gl.FLOAT, true\r\n            );\r\n        } else {\r\n            //prettier-ignore\r\n            texture = new Texture2D(gl, image_source,0,0, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE,\r\n                gl.LINEAR, gl.LINEAR, gl.RGB32F, gl.RGB, gl.FLOAT, true\r\n            );\r\n        }\r\n\r\n        const captureFBO: WebGLFramebuffer = gl.createFramebuffer()!;\r\n        const captureRBO: WebGLRenderbuffer = gl.createRenderbuffer()!;\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, captureFBO);\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, captureRBO);\r\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT24, res, res);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, captureRBO);\r\n\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.texture_id);\r\n        //prettier-ignore\r\n        TextureHelper.texParameterBuffer(gl, gl.TEXTURE_CUBE_MAP, null, res, res, gl.CLAMP_TO_EDGE,\r\n            gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.LINEAR, gl.LINEAR_MIPMAP_LINEAR, gl.RGBA16F, gl.RGBA,\r\n            gl.HALF_FLOAT, false\r\n        );\r\n\r\n        const cam = new CubeCamera();\r\n\r\n        // convert HDR equirectangular environment map to cubemap equivalent\r\n        const shader = Renderer.GetShader(\"EquiToCubemapShader\")!;\r\n        shader.use();\r\n        texture.bind(gl, 0);\r\n\r\n        gl.activeTexture(gl.TEXTURE1);\r\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, Renderer.EMPTY_CUBE_TEXTURE);\r\n\r\n        gl.viewport(0, 0, res, res);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, captureFBO);\r\n\r\n        const is_old_cull_face = gl.isEnabled(gl.CULL_FACE);\r\n        if (is_old_cull_face) gl.disable(gl.CULL_FACE);\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            renderer.setPerFrameUniforms(cam.views[i], cam.projection);\r\n            renderer.setPerModelUniforms(mat4.create(), cam.views[i], cam.projection);\r\n            gl.framebufferTexture2D(\r\n                gl.FRAMEBUFFER,\r\n                gl.COLOR_ATTACHMENT0,\r\n                gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n                this.texture_id,\r\n                0\r\n            );\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n            renderer.draw(box_mesh.draw_mode, box_mesh.count, 0, box_mesh.index_buffer, box_mesh.vertex_buffer);\r\n        }\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n        //let OpenGL generate mipmaps from first mip face (combatting visible dots artifact)\r\n        this.bind(gl, 0);\r\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n\r\n        renderer.resetViewport();\r\n        if (is_old_cull_face) gl.enable(gl.CULL_FACE);\r\n\r\n        gl.deleteRenderbuffer(captureRBO);\r\n        gl.deleteFramebuffer(captureFBO);\r\n        texture.destroy(gl);\r\n        box_mesh.destroy(gl);\r\n    }\r\n\r\n    private static genBRDFLut(\r\n        gl: WebGL2RenderingContext,\r\n        captureFBO: WebGLFramebuffer,\r\n        captureRBO: WebGLRenderbuffer,\r\n        renderer: Renderer\r\n    ): void {\r\n        if (Renderer.BRDF_LUT_TEXTURE === undefined) {\r\n            //Generate brdf LUT if it doesnt exist as its required for IBL\r\n            const quad_geom = new Geometry();\r\n            quad_geom.attributes = new Map<AttributeType, TypedArray>()\r\n                .set(\r\n                    AttributeType.Vertex,\r\n                    new Float32Array([-1.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, 1.0, 0.0, 1.0, -1.0, 0.0])\r\n                )\r\n                .set(AttributeType.Tex_Coord, new Float32Array([0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0]));\r\n            quad_geom.groups = [];\r\n\r\n            const quad_mesh = new Mesh(gl, quad_geom);\r\n            quad_mesh.draw_mode = gl.TRIANGLE_STRIP;\r\n\r\n            //prettier-ignore\r\n            const lut_tex = new Texture2D(gl, undefined, 512, 512, gl.CLAMP_TO_EDGE, \r\n                gl.CLAMP_TO_EDGE, gl.LINEAR, gl.LINEAR, gl.RG16F, gl.RG, gl.HALF_FLOAT, false);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, captureFBO);\r\n            gl.bindRenderbuffer(gl.RENDERBUFFER, captureRBO);\r\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT24, 512, 512);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, lut_tex.texture_id, 0);\r\n            gl.viewport(0, 0, 512, 512);\r\n            const shader = Renderer.GetShader(ShaderSource.BRDF.name)!;\r\n            shader.use();\r\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n            renderer.draw(quad_mesh.draw_mode, quad_mesh.count, 0, quad_mesh.index_buffer, quad_mesh.vertex_buffer);\r\n            Renderer.BRDF_LUT_TEXTURE = lut_tex.texture_id;\r\n            quad_mesh.destroy(gl);\r\n        }\r\n    }\r\n}\r\n"],"names":["TextureHelper","BoxGeometry","Mesh","CubeCamera","Renderer","Texture2D","Geometry"],"mappings":"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"}