{"version":3,"file":"PlaneGeometry.js","sources":["../../../../iwo/src/geometry/PlaneGeometry.ts"],"sourcesContent":["import { AttributeType, Geometry, Group } from \"./Geometry\";\r\nimport { BufferedGeometry, DefaultAttribute } from \"geometry/BufferedGeometry\";\r\n\r\nenum Order {\r\n    x = 0,\r\n    y = 1,\r\n    z = 2,\r\n}\r\n\r\nexport class PlaneGeometry extends Geometry {\r\n    public constructor(\r\n        width: number = 1,\r\n        depth: number = 1,\r\n        width_segments: number = 1,\r\n        depth_segments: number = 1,\r\n        stretch_texture: boolean = true\r\n    ) {\r\n        super();\r\n\r\n        const width_segs = Math.floor(width_segments) || 1;\r\n        const depth_segs = Math.floor(depth_segments) || 1;\r\n\r\n        let top = depth > 0 && width > 0 ? (depth_segs + 1) * (width_segs + 1) : 0;\r\n\r\n        const total_verts = top;\r\n\r\n        top = depth_segs * width_segs;\r\n        const total_indices = 6 * top;\r\n\r\n        let index_size = 2;\r\n        if (total_verts >= 65536) {\r\n            this.indices = new Uint32Array(total_indices);\r\n            index_size = 4;\r\n        } else this.indices = new Uint16Array(total_indices);\r\n\r\n        const indices = this.indices;\r\n\r\n        const verts = new Float32Array(total_verts * 3);\r\n        const tex_coords = new Float32Array(total_verts * 2);\r\n        const normals = new Float32Array(total_verts * 3);\r\n        const tangents = new Float32Array(total_verts * 3);\r\n        const bitangents = new Float32Array(total_verts * 3);\r\n\r\n        const interleaved = new Float32Array(total_verts * 14);\r\n        const groups: Group[] = [];\r\n\r\n        let ptr = 0;\r\n        let tex_ptr = 0;\r\n        let i_ptr = 0;\r\n        let interleaved_ptr = 0;\r\n        let vertex_count = 0;\r\n\r\n        if (depth !== 0 && width !== 0) {\r\n            //Build Top Side\r\n            buildSide(Order.x, Order.z, Order.y, width, width_segs, depth, depth_segs, 0, 1, -1, 0);\r\n        }\r\n\r\n        this.attributes.set(AttributeType.Vertex, verts);\r\n        this.attributes.set(AttributeType.Normal, normals);\r\n        this.attributes.set(AttributeType.Tex_Coord, tex_coords);\r\n        this.attributes.set(AttributeType.Tangent, tangents);\r\n        this.attributes.set(AttributeType.Bitangent, bitangents);\r\n        this.interleaved_attributes = interleaved;\r\n        this.groups = groups;\r\n\r\n        /**\r\n         * Fills the Arrays for one side of a cube\r\n         * Fills vertices, normals, texture_coords, tangents, and indices\r\n         *\r\n         * @modifies {ptr} ptr is incremented 3 for each vertex\r\n         * @modifies {i_ptr} i_ptr is incremented 3 for each indices\r\n         * @modifies {tex_ptr} ptr is incremented 2 for each vertex\r\n         * @modifies {vertex_index} is incremented by the number of vertices used by the indices\r\n         * @modifies {verts} values are placed at the index of ptr\r\n         * @modifies {normals} values are placed at the index of ptr\r\n         * @modifies {tex_coords} values are placed at the index of ptr\r\n         * @modifies {tangents} values are placed at the index of ptr\r\n         * @modifies {indices} values are placed at the index of i_ptr\r\n         *\r\n         * @param {Order} x_order - the dimension going from left to right\r\n         * @param {Order} y_order - the dimension going bottom to top\r\n         * @param {Order} z_order - the dimension of the plane\r\n         * @param {number} horizontal_size - the width of the plane\r\n         * @param {number} horizontal_steps - the number of sections per plane\r\n         * @param {number} vertical_size - this height of the plane\r\n         * @param {number} vertical_steps - the number of sections per plane\r\n         * @param {number} plane - the position in the dimension of the plane\r\n         * @param {number} x_dir - (-1 or 1) the direction of positive x ( 1 mean x grows to the right)\r\n         * @param {number} y_dir - (-1 or 1) the direction of positive y ( 1 mean y grows to the top)\r\n         * @param {number} mat_index - material index for this side\r\n         */\r\n        function buildSide(\r\n            x_order: Order,\r\n            y_order: Order,\r\n            z_order: Order,\r\n            horizontal_size: number,\r\n            horizontal_steps: number,\r\n            vertical_size: number,\r\n            vertical_steps: number,\r\n            plane: number,\r\n            x_dir: number,\r\n            y_dir: number,\r\n            mat_index: number = 0\r\n        ): void {\r\n            //Construct Vertices For this Side\r\n            const half_horizontal = horizontal_size / 2;\r\n            const half_vertical = vertical_size / 2;\r\n\r\n            const horizontal_step = horizontal_size / horizontal_steps;\r\n            const vertical_step = vertical_size / vertical_steps;\r\n\r\n            //The start_vertex is the first vertex the indices array will use\r\n            const start_vertex = vertex_count;\r\n\r\n            for (let x = -half_horizontal, i = 0; i <= horizontal_steps; x += horizontal_step, i++) {\r\n                for (let y = -half_vertical, j = 0; j <= vertical_steps; y += vertical_step, j++) {\r\n                    //The X,Y,Z Coords are different based on the side\r\n                    const px = ptr + x_order;\r\n                    const py = ptr + y_order;\r\n                    const pz = ptr + z_order;\r\n\r\n                    const ipx = interleaved_ptr + x_order;\r\n                    const ipy = interleaved_ptr + y_order;\r\n                    const ipz = interleaved_ptr + z_order;\r\n\r\n                    //The X coords may go from left to right or right to left\r\n                    interleaved[ipx] = verts[px] = x * x_dir;\r\n\r\n                    //The Y coords may go from bottom to top or top to bottom\r\n                    interleaved[ipy] = verts[py] = y * y_dir;\r\n                    //The Z coordinate is the same for a side\r\n                    interleaved[ipz] = verts[pz] = plane;\r\n\r\n                    //If stretched then texture_coords go from 0 to 1.\r\n                    //If not stretched texture_coords go above 1;\r\n                    interleaved[interleaved_ptr + 3] = tex_coords[tex_ptr++] = stretch_texture\r\n                        ? (i * horizontal_step) / horizontal_size\r\n                        : i;\r\n                    interleaved[interleaved_ptr + 4] = tex_coords[tex_ptr++] = stretch_texture\r\n                        ? (j * vertical_step) / vertical_size\r\n                        : j;\r\n\r\n                    //The normal is just 1 in the direction of the side\r\n                    interleaved[ipx + 5] = normals[px] = 0;\r\n                    interleaved[ipy + 5] = normals[py] = 0;\r\n                    interleaved[ipz + 5] = normals[pz] = plane >= 0 ? 1 : -1;\r\n\r\n                    //The tangent is any vector orthogonal to the normal\r\n                    interleaved[ipx + 8] = tangents[px] = x_dir;\r\n                    interleaved[ipy + 8] = tangents[py] = 0;\r\n                    interleaved[ipz + 8] = tangents[pz] = 0;\r\n\r\n                    //The bitangent is any vector orthogonal to the normal and tangent\r\n                    interleaved[ipx + 11] = bitangents[px] = 0;\r\n                    interleaved[ipy + 11] = bitangents[py] = y_dir;\r\n                    interleaved[ipz + 11] = bitangents[pz] = 0;\r\n\r\n                    //Processed one vertex\r\n                    ptr += 3;\r\n                    interleaved_ptr += 14;\r\n                    vertex_count++;\r\n                }\r\n            }\r\n\r\n            //INDICES\r\n            let index_count = 0;\r\n            for (let i = 0; i < horizontal_steps; i++) {\r\n                for (let j = 0; j < vertical_steps; j++) {\r\n                    //The Vertex indices of the 4 corners we need for this quad\r\n                    const lower_left = start_vertex + (vertical_steps + 1) * i + j;\r\n                    const lower_right = start_vertex + (vertical_steps + 1) * (i + 1) + j;\r\n                    const upper_left = lower_left + 1;\r\n                    const upper_right = lower_right + 1;\r\n\r\n                    //Counter Clockwise Triangles\r\n                    //Triangle 1\r\n                    //0 2 1\r\n                    indices[i_ptr++] = lower_left;\r\n                    indices[i_ptr++] = lower_right;\r\n                    indices[i_ptr++] = upper_left;\r\n\r\n                    //Triangle 2\r\n                    //1 2 3\r\n                    indices[i_ptr++] = upper_left;\r\n                    indices[i_ptr++] = lower_right;\r\n                    indices[i_ptr++] = upper_right;\r\n\r\n                    //number of indices for a quad\r\n                    index_count += 6;\r\n                }\r\n            }\r\n            //Each side is a seperate group so they can be rendered with different materials\r\n            // groups.push({\r\n            //     count: index_count,\r\n            //     offset: (i_ptr - index_count) * index_size,\r\n            //     material_index: mat_index,\r\n            // } as Group);\r\n        }\r\n    }\r\n\r\n    public getBufferedGeometry(): BufferedGeometry {\r\n        const attrib = DefaultAttribute.SingleBufferApproach();\r\n        const index_buffer = { buffer: this.indices, target: 34963 };\r\n\r\n        for (const a of attrib) a.byte_stride = 56; //12 + 8 + 12 + 12 + 12;\r\n        attrib[0].byte_offset = 0;\r\n        attrib[1].byte_offset = 12;\r\n        attrib[2].byte_offset = 20;\r\n        attrib[3].byte_offset = 32;\r\n        attrib[4].byte_offset = 44;\r\n\r\n        return {\r\n            attributes: attrib,\r\n            index_buffer: index_buffer,\r\n            buffers: [{ buffer: this.interleaved_attributes, target: 34962 }],\r\n            groups: this.groups,\r\n        } as BufferedGeometry;\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}