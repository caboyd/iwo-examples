{"version":3,"file":"BufferedGeometry.js","sources":["../../../../iwo/src/geometry/BufferedGeometry.ts"],"sourcesContent":["import { AttributeType, Geometry, Group } from \"geometry/Geometry\";\r\nimport { ComponentFormatType, ComponentType } from \"graphics/WebglConstants\";\r\nimport TypedArray = NodeJS.TypedArray;\r\nimport { UniformInfo, UniformType } from \"graphics/Uniform\";\r\n\r\n//Default assumes index buffer is buffer_view_index 0\r\nexport namespace DefaultAttribute {\r\n    export const Vertex = (): Attribute => {\r\n        return {\r\n            type: AttributeType.Vertex,\r\n            enabled: true,\r\n            buffer_index: 0,\r\n            component_type: 5126, // FLOAT\r\n        };\r\n    };\r\n    export const Tex_Coord = (): Attribute => {\r\n        return {\r\n            type: AttributeType.Tex_Coord,\r\n            enabled: true,\r\n            buffer_index: 0,\r\n            component_type: 5126, // FLOAT\r\n        };\r\n    };\r\n    export const Normal = (): Attribute => {\r\n        return {\r\n            type: AttributeType.Normal,\r\n            enabled: true,\r\n            buffer_index: 0,\r\n            component_type: 5126, // FLOAT\r\n        };\r\n    };\r\n    export const Tangent = (): Attribute => {\r\n        return {\r\n            type: AttributeType.Tangent,\r\n            enabled: false,\r\n            buffer_index: 0,\r\n            component_type: 5126, // FLOAT\r\n        };\r\n    };\r\n    export const Bitangent = (): Attribute => {\r\n        return {\r\n            type: AttributeType.Bitangent,\r\n            enabled: false,\r\n            buffer_index: 0,\r\n            component_type: 5126, // FLOAT\r\n        };\r\n    };\r\n\r\n    export const SingleBufferApproach = (): Attributes => {\r\n        return [\r\n            DefaultAttribute.Vertex(),\r\n            DefaultAttribute.Tex_Coord(),\r\n            DefaultAttribute.Normal(),\r\n            DefaultAttribute.Tangent(),\r\n            DefaultAttribute.Bitangent(),\r\n        ];\r\n    };\r\n    export const MultiBufferApproach = (): Attributes => {\r\n        return [\r\n            { ...DefaultAttribute.Vertex(), ...{ buffer_index: 0 } },\r\n            { ...DefaultAttribute.Tex_Coord(), ...{ buffer_index: 1 } },\r\n            { ...DefaultAttribute.Normal(), ...{ buffer_index: 2 } },\r\n            { ...DefaultAttribute.Tangent(), ...{ buffer_index: 3 } },\r\n            { ...DefaultAttribute.Bitangent(), ...{ buffer_index: 4 } },\r\n        ];\r\n    };\r\n}\r\n\r\nexport interface Attribute {\r\n    type: AttributeType;\r\n    enabled?: boolean;\r\n    buffer_index: number;\r\n    byte_offset?: number;\r\n    byte_stride?: number;\r\n    // eslint-disable-next-line prettier/prettier\r\n    component_type: ComponentType;\r\n    // component_count: 1 | 2 | 3 | 4 | 9 | 16;\r\n    // //SCALAR | VEC2 | VEC3 | VEC4 | MAT2 | MAT3 | MAT4\r\n    // component_format_type: ComponentFormatType;\r\n    normalized?: boolean;\r\n}\r\n\r\ntype AttributeComponentCount = { readonly [TKey in AttributeType]: number };\r\ntype AttributeAccessorType = { readonly [TKey in AttributeType]: ComponentFormatType };\r\n\r\nexport const AttributeComponentCountMap = {\r\n    [AttributeType.Vertex]: 3,\r\n    [AttributeType.Tex_Coord]: 2,\r\n    [AttributeType.Normal]: 3,\r\n    [AttributeType.Tangent]: 3,\r\n    [AttributeType.Bitangent]: 3,\r\n};\r\n\r\nexport const AttributeAccessorTypeMap: AttributeAccessorType = {\r\n    [AttributeType.Vertex]: \"VEC3\",\r\n    [AttributeType.Tex_Coord]: \"VEC2\",\r\n    [AttributeType.Normal]: \"VEC3\",\r\n    [AttributeType.Tangent]: \"VEC3\",\r\n    [AttributeType.Bitangent]: \"VEC3\",\r\n};\r\n\r\nexport type Attributes = readonly [Attribute, Attribute, Attribute, Attribute, Attribute];\r\n\r\nexport interface GeometryBuffer {\r\n    buffer: TypedArray;\r\n    //ARRAY_BUFFER | ELEMENT_ARRAY_BUFFER\r\n    target: 34962 | 34963 | number;\r\n}\r\n\r\n// export interface BufferedGeometry {\r\n//     attributes: Attribute[];\r\n//     index_buffer?: GeometryBuffer;\r\n//     buffers: GeometryBuffer[];\r\n//     groups: Group[];\r\n//\r\n//     //Bounding Sphere\r\n//\r\n//     //Bounding Box (AABB)\r\n// }\r\n\r\nexport interface BufferedGeometryOptions {\r\n    interleave_buffer?: boolean;\r\n}\r\n\r\nexport class BufferedGeometry {\r\n    public attributes: Attributes;\r\n    public index_buffer?: GeometryBuffer;\r\n    public buffers: GeometryBuffer[];\r\n    public groups?: Group[];\r\n\r\n    public constructor() {\r\n        this.attributes = DefaultAttribute.SingleBufferApproach();\r\n        this.buffers = [];\r\n    }\r\n\r\n    public static fromGeometry(geom: Geometry, options?: BufferedGeometryOptions): BufferedGeometry {\r\n        const b = new BufferedGeometry();\r\n        b.attributes = DefaultAttribute.SingleBufferApproach();\r\n        b.buffers = [];\r\n        b.groups = geom.groups;\r\n        b.index_buffer = geom.indices ? { buffer: geom.indices, target: 34963 } : undefined;\r\n\r\n        b.setupAttributes(geom);\r\n\r\n        if (options?.interleave_buffer === true) {\r\n            if (geom.interleaved_attributes) b.buffers.push({ buffer: geom.interleaved_attributes, target: 34962 });\r\n            else {\r\n                throw new Error(\"Code does not yet exist to interleave a buffer for you\");\r\n                //this.setupInterleavedBuffer(geom);\r\n            }\r\n            b.setupStrideOffset(geom);\r\n        } else {\r\n            b.setupConcatenatedBuffer(geom);\r\n        }\r\n        return b;\r\n    }\r\n    //TODO: finish this if i want\r\n    private setupInterleavedBuffer(geom: Geometry): void {\r\n        //loopity loop through everything and put in a float32array\r\n        const len = this.getTotalBufferLength(geom);\r\n        const interleaved_buffer = new Float32Array(len);\r\n    }\r\n\r\n    private setupAttributes(geom: Geometry): void {\r\n        this.attributes[0].enabled = geom.attributes.has(AttributeType.Vertex);\r\n        this.attributes[1].enabled = geom.attributes.has(AttributeType.Tex_Coord);\r\n        this.attributes[2].enabled = geom.attributes.has(AttributeType.Normal);\r\n        this.attributes[3].enabled = geom.attributes.has(AttributeType.Tangent);\r\n        this.attributes[4].enabled = geom.attributes.has(AttributeType.Bitangent);\r\n\r\n        // for (const i of AttributeTypeValues) {\r\n        //     this.attributes[i].enabled = geom.attributes.has(i);\r\n        // }\r\n    }\r\n\r\n    private setupConcatenatedBuffer(geom: Geometry): void {\r\n        //TODO: check if any buffers are duplicates that can be reused with offset\r\n\r\n        const len = this.getTotalBufferLength(geom);\r\n        const concat_buffer = new Float32Array(len);\r\n\r\n        let offset = 0;\r\n        let previous_buffers_length = 0;\r\n        // for (const i of AttributeTypeValues) {\r\n        //     const arr = geom.attributes.get(i)!;\r\n        //     this.attributes[i + 1].byte_offset = offset += arr.byteLength;\r\n        //     concat_buffer.set(arr, previous_buffers_length);\r\n        //     previous_buffers_length += arr.length;\r\n        // }\r\n\r\n        if (geom.attributes.has(AttributeType.Vertex)) {\r\n            const arr = geom.attributes.get(AttributeType.Vertex)!;\r\n            this.attributes[1].byte_offset = offset += arr.byteLength;\r\n            concat_buffer.set(arr, previous_buffers_length);\r\n            previous_buffers_length += arr.length;\r\n        }\r\n        if (geom.attributes.has(AttributeType.Tex_Coord)) {\r\n            const arr = geom.attributes.get(AttributeType.Tex_Coord)!;\r\n            this.attributes[2].byte_offset = offset += geom.attributes.get(AttributeType.Tex_Coord)!.byteLength;\r\n            concat_buffer.set(arr, previous_buffers_length);\r\n            previous_buffers_length += arr.length;\r\n        }\r\n\r\n        if (geom.attributes.has(AttributeType.Normal)) {\r\n            const arr = geom.attributes.get(AttributeType.Normal)!;\r\n            this.attributes[3].byte_offset = offset += geom.attributes.get(AttributeType.Normal)!.byteLength;\r\n            concat_buffer.set(arr, previous_buffers_length);\r\n            previous_buffers_length += arr.length;\r\n        }\r\n\r\n        if (geom.attributes.has(AttributeType.Tangent)) {\r\n            const arr = geom.attributes.get(AttributeType.Tangent)!;\r\n            this.attributes[4].byte_offset = offset += geom.attributes.get(AttributeType.Tangent)!.byteLength;\r\n            concat_buffer.set(arr, previous_buffers_length);\r\n            previous_buffers_length += arr.length;\r\n        }\r\n        if (geom.attributes.has(AttributeType.Bitangent)) {\r\n            const arr = geom.attributes.get(AttributeType.Bitangent)!;\r\n            concat_buffer.set(arr, previous_buffers_length);\r\n        }\r\n\r\n        this.buffers.push({ buffer: concat_buffer, target: 34962 });\r\n    }\r\n\r\n    private getTotalBufferLength(geom: Geometry): number {\r\n        let len = 0;\r\n        for (const value of geom.attributes.values()) len += value.length;\r\n        return len;\r\n    }\r\n\r\n    private setupStrideOffset(geom: Geometry): void {\r\n        let stride = 0;\r\n        if (geom.attributes.has(AttributeType.Vertex)) stride += 12;\r\n        if (geom.attributes.has(AttributeType.Tex_Coord)) {\r\n            this.attributes[1].byte_offset = stride;\r\n            stride += 8;\r\n        }\r\n        if (geom.attributes.has(AttributeType.Normal)) {\r\n            this.attributes[2].byte_offset = stride;\r\n            stride += 12;\r\n        }\r\n        if (geom.attributes.has(AttributeType.Tangent)) {\r\n            this.attributes[3].byte_offset = stride;\r\n            stride += 12;\r\n        }\r\n        if (geom.attributes.has(AttributeType.Bitangent)) {\r\n            this.attributes[4].byte_offset = stride;\r\n            stride += 12;\r\n        }\r\n        this.attributes[0].byte_stride = this.attributes[1].byte_stride = this.attributes[2].byte_stride = this.attributes[3].byte_stride = this.attributes[4].byte_stride = stride;\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}