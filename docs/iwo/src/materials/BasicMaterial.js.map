{"version":3,"file":"BasicMaterial.js","sources":["../../../../iwo/src/materials/BasicMaterial.ts"],"sourcesContent":["import { Material } from \"./Material\";\r\nimport { Shader } from \"../graphics/shader/Shader\";\r\nimport { Renderer } from \"../graphics/Renderer\";\r\nimport { Texture2D } from \"../graphics/Texture2D\";\r\nimport { vec3 } from \"gl-matrix\";\r\nimport { TextureCubeMap } from \"../graphics/TextureCubeMap\";\r\n\r\nexport class BasicMaterial extends Material {\r\n    private equirectangular_albedo: boolean = false;\r\n    public albedo: vec3;\r\n    public albedo_texture: Texture2D | undefined;\r\n    public albedo_cube_texture: TextureCubeMap | undefined;\r\n\r\n    public constructor(color: vec3) {\r\n        super();\r\n        this.albedo = vec3.clone(color);\r\n    }\r\n\r\n    public activate(gl: WebGL2RenderingContext): void {\r\n        const shader = this.shader;\r\n        const active_textures = [false, false];\r\n\r\n        if (this.albedo_texture) {\r\n            this.albedo_texture.bind(gl, 0);\r\n            active_textures[0] = true;\r\n            if (this.equirectangular_albedo) shader.setUniform(\"u_material.equirectangular_texture\", true);\r\n        }\r\n\r\n        if (this.albedo_cube_texture) {\r\n            this.albedo_cube_texture.bind(gl, 1);\r\n            active_textures[1] = true;\r\n        }\r\n\r\n        shader.setUniform(\"u_material.active_textures[0]\", active_textures);\r\n        shader.setUniform(\"u_material.albedo\", this.albedo);\r\n    }\r\n\r\n    public setAlbedoTexture(tex: Texture2D, equirectangular: boolean = false): void {\r\n        this.equirectangular_albedo = equirectangular;\r\n        this.albedo_texture = tex;\r\n    }\r\n\r\n    public setAlbedoCubeTexture(tex: TextureCubeMap): void {\r\n        this.albedo_cube_texture = tex;\r\n    }\r\n\r\n    public get shader(): Shader {\r\n        return Renderer.GetShader(\"BasicShader\")!;\r\n    }\r\n\r\n    public static get Shader(): Shader {\r\n        return Renderer.GetShader(\"BasicShader\")!;\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;MAOa,aAAc,SAAQ,QAAQ;IAC/B,sBAAsB,GAAY,KAAK,CAAC;IACzC,MAAM,CAAO;IACb,cAAc,CAAwB;IACtC,mBAAmB,CAA6B;IAEvD,YAAmB,KAAW;QAC1B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACnC;IAEM,QAAQ,CAAC,EAA0B;QACtC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,MAAM,eAAe,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAEvC,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAChC,eAAe,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YAC1B,IAAI,IAAI,CAAC,sBAAsB;gBAAE,MAAM,CAAC,UAAU,CAAC,oCAAoC,EAAE,IAAI,CAAC,CAAC;SAClG;QAED,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YACrC,eAAe,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;SAC7B;QAED,MAAM,CAAC,UAAU,CAAC,+BAA+B,EAAE,eAAe,CAAC,CAAC;QACpE,MAAM,CAAC,UAAU,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACvD;IAEM,gBAAgB,CAAC,GAAc,EAAE,kBAA2B,KAAK;QACpE,IAAI,CAAC,sBAAsB,GAAG,eAAe,CAAC;QAC9C,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC;KAC7B;IAEM,oBAAoB,CAAC,GAAmB;QAC3C,IAAI,CAAC,mBAAmB,GAAG,GAAG,CAAC;KAClC;IAED,IAAW,MAAM;QACb,OAAO,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAE,CAAC;KAC7C;IAEM,WAAW,MAAM;QACpB,OAAO,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAE,CAAC;KAC7C;;;;;"}